package main

/* a spinning sphere wireframe */

import (
	"math"
    "time"
    "fmt"
	"github.com/hortencio-main/go-sr"
)

type Vec3 struct {
    x, y, z float32
}

const (
    PI     = 3.14159                            //
    fov    = 45.0                               // field of view in degrees
    height = 24                                 // framebuffer height in characters
    width  = 80                                 // framebuffer width in characters
    aspect = float32(width*5)/float32(height*8) // aspect ratio (adjusted to 5:8, for a square output on the terminal)
    near   = 0.1                                // near plane
    far    = 100.0                              // far plane
    radius = 10.0                               // camera rotation radius
    speedh = 0.02                               // horizontal camera spin (radians per frame)
)

var (
    buffer []byte
    angleYaw   float64 = 0                 // horizontal camera angle (radians)
    anglePitch float64 = 60.0 * PI / 180.0 // vertical camera angle (radians)
	speedv     float64 = 0.01              // vertical camera spin (radians per frame)
)

func init() {
    sr.Viewport(width, height)                 // create an framebuffer for the render
    buffer = make([]byte, height*(width + 1))  // create an buffer for the terminal output
    sr.PolygonMode(sr.FRONT_AND_BACK, sr.LINE) // set line drawing mode
}

func main() {
	var (
        top    float32 = near * float32(math.Tan(fov * PI / 360.0))
        bottom float32 =        -top
        right  float32 =  top*aspect
        left   float32 =      -right
        proj = sr.Frustum(left, right, bottom, top, near, far) // Set up perspective projection
    )

	for {
        camPos := Vec3{7,7,7}
        view := sr.LookAt( camPos.x, camPos.y, camPos.z, 0, 0, 0)
        sr.SetCamera(proj, view)
        sr.ClearColor(0,0,0)

        sr.Rotatef([]float32{
            float32(angleYaw),
            0.1,
            1.0,
            0,
        })
        angleYaw += 2.0
        sr.Begin()
            for v := 0; v < len(sphere); v+=4 {
                sr.Color3f( 1.0, 0, 0.0)
                sr.Vertex3f(sphere[v  ][0],sphere[v  ][1],sphere[v  ][2])
                sr.Vertex3f(sphere[v+1][0],sphere[v+1][1],sphere[v+1][2])
                sr.Vertex3f(sphere[v+2][0],sphere[v+2][1],sphere[v+2][2])
                sr.Vertex3f(sphere[v+3][0],sphere[v+3][1],sphere[v+3][2])
            }
        sr.End()
        
        image := sr.ReadPixels()
        for i := 0; i < height; i++ {
            for j := 0; j < width; j++ {
                if image[j + width*i][0] > .1 {
                    buffer = append(buffer, '#')
                } else {
                    buffer = append(buffer, ' ')
                }
            }
            buffer = append(buffer, '\n')
        }
        fmt.Println(string(buffer))
        buffer = buffer[:0:0]
        
        time.Sleep(time.Second / 60.0)
    }
}

var sphere = [][3]float32{
	{ 0.195090,0.980785,-0.000001 }, 
	{ 0.831469,0.555570,-0.000001 }, 
	{ 0.587938,0.555570,-0.587939 }, 
	{ 0.137950,0.980785,-0.137951 }, 
	{ 0.587938,0.555570,-0.587939 }, 
	{ 0.693520,-0.195090,-0.693521 }, 
	{ 0.000000,-0.195090,-0.980787 }, 
	{ 0.000000,0.555570,-0.831471 }, 
	{ 0.831469,0.555570,-0.000001 }, 
	{ 0.980785,-0.195089,-0.000001 }, 
	{ 0.693520,-0.195090,-0.693521 }, 
	{ 0.587938,0.555570,-0.587939 }, 
	{ 0.137950,0.980785,-0.137951 }, 
	{ 0.587938,0.555570,-0.587939 }, 
	{ 0.000000,0.555570,-0.831471 }, 
	{ 0.000000,0.980785,-0.195091 }, 
	{ 0.000000,0.555571,0.831469 }, 
	{ 0.000000,-0.195089,0.980784 }, 
	{ 0.693519,-0.195089,0.693519 }, 
	{ 0.587937,0.555571,0.587937 }, 
	{ 0.137949,0.980785,0.137949 }, 
	{ 0.587937,0.555571,0.587937 }, 
	{ 0.831469,0.555570,-0.000001 }, 
	{ 0.195090,0.980785,-0.000001 }, 
	{ 0.000000,-0.195089,0.980784 }, 
	{ 0.000000,-0.831469,0.555569 }, 
	{ 0.392847,-0.831469,0.392847 }, 
	{ 0.693519,-0.195089,0.693519 }, 
	{ 0.980785,-0.195089,-0.000001 }, 
	{ 0.555570,-0.831469,-0.000001 }, 
	{ 0.392847,-0.831469,-0.392848 }, 
	{ 0.693520,-0.195090,-0.693521 }, 
	{ 0.137949,0.980785,0.137949 }, 
	{ -0.000001,1.000001,-0.000001 }, 
	{ -0.137950,0.980785,0.137949 }, 
	{ 0.000000,0.980785,0.195090 }, 
	{ 0.555570,-0.831469,-0.000001 }, 
	{ 0.980785,-0.195089,-0.000001 }, 
	{ 0.693519,-0.195089,0.693519 }, 
	{ 0.392847,-0.831469,0.392847 }, 
	{ 0.000000,0.980785,0.195090 }, 
	{ 0.000000,0.555571,0.831469 }, 
	{ 0.587937,0.555571,0.587937 }, 
	{ 0.137949,0.980785,0.137949 }, 
	{ -0.587938,0.555571,0.587937 }, 
	{ -0.693520,-0.195089,0.693519 }, 
	{ 0.000000,-0.195089,0.980784 }, 
	{ 0.000000,0.555571,0.831469 }, 
	{ -0.392848,-0.831469,0.392847 }, 
	{ -0.555570,-0.831469,-0.000001 }, 
	{ 0.000000,-0.999999,-0.000001 }, 
	{ 0.000000,-0.831469,0.555569 }, 
	{ -0.392848,-0.831469,-0.392848 }, 
	{ 0.000000,-0.831470,-0.555571 }, 
	{ 0.392847,-0.831469,-0.392848 }, 
	{ 0.000000,-0.999999,-0.000001 }, 
	{ -0.137950,0.980785,0.137949 }, 
	{ -0.587938,0.555571,0.587937 }, 
	{ 0.000000,0.555571,0.831469 }, 
	{ 0.000000,0.980785,0.195090 }, 
	{ -0.587938,0.555570,-0.587938 }, 
	{ -0.693520,-0.195090,-0.693520 }, 
	{ -0.980785,-0.195089,-0.000001 }, 
	{ -0.831470,0.555570,-0.000001 }, 
	{ -0.693520,-0.195089,0.693519 }, 
	{ -0.587938,0.555571,0.587937 }, 
	{ -0.831470,0.555570,-0.000001 }, 
	{ -0.980785,-0.195089,-0.000001 }, 
	{ -0.693520,-0.195089,0.693519 }, 
	{ -0.392848,-0.831469,0.392847 }, 
	{ 0.000000,-0.831469,0.555569 }, 
	{ 0.000000,-0.195089,0.980784 }, 
	{ -0.195091,0.980785,-0.000001 }, 
	{ -0.831470,0.555570,-0.000001 }, 
	{ -0.587938,0.555571,0.587937 }, 
	{ -0.137950,0.980785,0.137949 }, 
	{ -0.980785,-0.195089,-0.000001 }, 
	{ -0.555570,-0.831469,-0.000001 }, 
	{ -0.392848,-0.831469,0.392847 }, 
	{ -0.693520,-0.195089,0.693519 }, 
	{ 0.392847,-0.831469,0.392847 }, 
	{ 0.000000,-0.831469,0.555569 }, 
	{ 0.000000,-0.999999,-0.000001 }, 
	{ 0.555570,-0.831469,-0.000001 }, 
	{ -0.137950,0.980785,-0.137951 }, 
	{ -0.587938,0.555570,-0.587938 }, 
	{ -0.831470,0.555570,-0.000001 }, 
	{ -0.195091,0.980785,-0.000001 }, 
	{ -0.693520,-0.195090,-0.693520 }, 
	{ -0.392848,-0.831469,-0.392848 }, 
	{ -0.555570,-0.831469,-0.000001 }, 
	{ -0.980785,-0.195089,-0.000001 }, 
	{ 0.000000,-0.195090,-0.980787 }, 
	{ 0.000000,-0.831470,-0.555571 }, 
	{ -0.392848,-0.831469,-0.392848 }, 
	{ -0.693520,-0.195090,-0.693520 }, 
	{ 0.000000,0.555570,-0.831471 }, 
	{ 0.000000,-0.195090,-0.980787 }, 
	{ -0.693520,-0.195090,-0.693520 }, 
	{ -0.587938,0.555570,-0.587938 }, 
	{ 0.000000,0.980785,-0.195091 }, 
	{ 0.000000,0.555570,-0.831471 }, 
	{ -0.587938,0.555570,-0.587938 }, 
	{ -0.137950,0.980785,-0.137951 }, 
	{ 0.000000,-0.831470,-0.555571 }, 
	{ 0.000000,-0.195090,-0.980787 }, 
	{ 0.693520,-0.195090,-0.693521 }, 
	{ 0.392847,-0.831469,-0.392848 }, 
	{ 0.587937,0.555571,0.587937 }, 
	{ 0.693519,-0.195089,0.693519 }, 
	{ 0.980785,-0.195089,-0.000001 }, 
	{ 0.831469,0.555570,-0.000001 }, 
	{ -0.000001,1.000001,-0.000001 }, 
	{ -0.137950,0.980785,-0.137951 }, 
	{ -0.195091,0.980785,-0.000001 }, 
	{ -0.137950,0.980785,0.137949 }, 
	{ 0.000000,0.980785,-0.195091 }, 
	{ -0.000001,1.000001,-0.000001 }, 
	{ 0.195090,0.980785,-0.000001 }, 
	{ 0.137950,0.980785,-0.137951 }, 
}
